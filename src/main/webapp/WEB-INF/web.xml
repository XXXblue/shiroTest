<!DOCTYPE web-app PUBLIC
        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
        "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
  <display-name>Archetype Created Web Application</display-name>
  <!--加载配置文件的前提-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--spring beans配置文件所在的目录-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext-*.xml</param-value>
  </context-param>

  <!--spring mvc的配置 可以这么理解所有的请求都是通过核心的分发请求DispatcherServlet来处理-->
  <!--以前是在servlet用初始化参数指定一个路径，就是在servletConfig中加载初始化参数，然后路径用classpath指向-->
  <!--现在可以放在WEB-INF下记得xml前半部分的名字要和servlet的名字一样，也可以实现加载。（加载方式不变，写法位置变了）-->
  <!--这种加载的配置方式是： servlet的名字+ - + servlet.xml 就能找到，名字一定要和servlet名字一样  -->
  <servlet>
    <servlet-name>spring</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>spring</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>

  <filter>
    <filter-name>shiroFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>shiroFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
</web-app>
